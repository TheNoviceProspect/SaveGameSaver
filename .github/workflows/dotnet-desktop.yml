name: .NET Core Desktop

on:
  push:
    tags:
      - 'v*'
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  
jobs:
  setup: # New job for setup and common steps
    runs-on: windows-latest
    outputs:
      solution_name: ${{ env.Solution_Name }}
      wap_project_path: ${{ env.Wap_Project_Path }}
      output_directory: ${{ env.Output_Directory }}
      app_version: ${{ steps.set_app_version.outputs.appVersion }}

    env:
      appVersion: 0.2.4
      Solution_Name: SaveGameSaver                         
      Wap_Project_Directory: SaveGameSaver    
      Wap_Project_Path: SaveGameSaver                   
      NUGET_PACKAGES: ${{ github.workspace }}\\.nuget\\packages
      Output_Directory: ${{ github.workspace }}\\output\\

    steps:
      - name: Set App Version Output
        id: set_app_version
        run: echo "$appVersion=${{ env.appVersion }}"

      - name: Validate Cache
        uses: actions/cache@v4
        with:
          path: ${{ github.workspace }}\\.nuget\\packages
          key: ${{ runner.os }}-nuget-${{ env.appVersion }}-${{ hashFiles('**\\packages.lock.json') }}
          restore-keys: |
            ${{ runner.os }}-nuget-${{ env.appVersion }}

      - name: Install .NET Core
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x

  build:
    needs: setup
    strategy:
      matrix:
        configuration: [Release]
        targetplatform: [net8.0-windows]
        runtimeidentifier: [win-x64,win-arm64]

    runs-on: windows-latest  # For a list of available runner types, refer to
                             # https://help.github.com/en/actions/reference/workflow-syntax-for-github-actions#jobsjob_idruns-on
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup MSBuild.exe
        uses: microsoft/setup-msbuild@v2

      - name: Restore the application
        run: msbuild ${{ needs.setup.outputs.solution_name }} /t:Restore /p:Configuration=$env:Configuration /p:TargetPlatform=$env:Targetplatform /p:RuntimeIdentifiers=$env:Runtimeidentifier
        env:
          Configuration: ${{ matrix.configuration }}
          Targetplatform: ${{ matrix.targetplatform }}
          Runtimeidentifier: ${{ matrix.runtimeidentifier }}

      - name: Create the app package
        run: msbuild ${{ needs.setup.outputs.wap_project_path }} /p:Configuration=$env:Configuration /p:TargetPlatform=$env:Targetplatform /p:RuntimeIdentifiers=$env:Runtimeidentifier /p:PublishSingleFile=true /p:SelfContained=true /p:RestorePackages=false /p:OutDir=${{ needs.setup.outputs.output_directory }}
        env:
          Configuration: ${{ matrix.configuration }}
          Targetplatform: ${{ matrix.targetplatform }}
          Runtimeidentifier: ${{ matrix.runtimeidentifier }}

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: ${{ needs.setup.outputs.solution_name}}-${{ matrix.runtimeidentifier }}.exe
          path: ${{ needs.setup.outputs.output_directory }}\\${{ needs.setup.outputs.solution_name }}*.exe

  create-release:
    runs-on: windows-latest
    needs: [ setup, build ]
    if: (github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')) || 
       (github.event_name == 'pull_request' && github.event.pull_request.merged == true && github.base_ref == 'main')
    steps:
      - uses: actions/checkout@v3
      - name: Read release body from file
        id: read_release_notes
        run: |
          $RELEASE_BODY = Get-Content -Path release-notes.md -Raw
          echo "content=${RELEASE_BODY}" >> $GITHUB_OUTPUT
      - name: Download win-x64 artifact
        uses: actions/download-artifact@v3
        with:
          name: SaveGameSaver-win-x64.exe # Match the artifact name from the build job
      - name: Download win-arm64 artifact
        uses: actions/download-artifact@v3
        with:
          name: SaveGameSaver-win-arm64.exe # Match the artifact name from the build job
      - name: Determine Release Name
        id: determine_release_name
        run: |
          $releaseName = "Release v${{ needs.set_app_version.outputs.appVersion }}.${{ github.run_number }}"
          if ("${{ github.event_name }}" -eq 'push') {
            $releaseName = "$releaseName - ${{ github.event.commits[0].message }}"
          } else {
            $releaseName = "$releaseName - ${{ github.event.pull_request.title }}"
          }
          echo "release_name=$releaseName" >> $GITHUB_OUTPUT
      - name: Create release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          release_name: ${{ steps.determine_release_name.outputs.release_name }}
          tag_name: ${{ github.ref }}
          body: >-
            ## New Release: v${{ needs.set_app_version.outputs.appVersion }}.${{ github.run_number }}

            **Auto-Update Hint:**
            ```json
            { "version": v"${{ needs.set_app_version.outputs.appVersion }}.${{ github.run_number }}" }
            ```
          draft: false
          prerelease: false
      - name: Upload win-x64 release asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./Sa${{ needs.setup.outputs.solution_name }}-win-x64.exe
          asset_name: ${{ needs.setup.outputs.solution_name }}-win-x64.exe
          asset_content_type: application/octet-stream
      - name: Upload win-arm64 release asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./${{ needs.setup.outputs.solution_name }}-win-arm64.exe
          asset_name: ${{ needs.setup.outputs.solution_name }}-win-arm64.exe
          asset_content_type: application/octet-stream
