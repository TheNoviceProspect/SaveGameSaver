name: .NET Core Desktop

on:
  push:
    tags:
      - 'v*'
    branches: ["main"]
  pull_request:
    branches: ["main"]

jobs:
  setup: # New job for setup and common steps
    runs-on: ubuntu-latest
    outputs:
      solution_name: ${{ env.Solution_Name }}
      core_project_path: ${{ env.Core_Project_Path }}
      desktop_project_path: ${{ env.Desktop_Project_Path }}
      output_directory: ${{ env.Output_Directory }}
      app_version: ${{ steps.set_app_version.outputs.appVersion }}

    env:
      appVersion: 0.3Î±(alpha)
      Solution_Name: SaveGameSaver
      Core_Project_Directory: SaveGameSaver.Core
      Core_Project_Path: SaveGameSaver.Core
      Desktop_Project_Directory: SaveGameSaver.Desktop
      Desktop_Project_Path: SaveGameSaver.Desktop
      NUGET_PACKAGES: ${{ github.workspace }}/.nuget/packages
      Output_Directory: ${{ github.workspace }}/output/

    steps:
      - name: Set App Version Output
        id: set_app_version
        run: echo "$appVersion=${{ env.appVersion }}"

      - name: Validate Cache
        uses: actions/cache@v4
        with:
          path: ${{ github.workspace }}/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ env.appVersion }}-${{ hashFiles('**/packages.lock.json') }}
          restore-keys: |
            ${{ runner.os }}-nuget-${{ env.appVersion }}

      - name: Install .NET Core
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x

  build:
    needs: setup
    strategy:
      matrix:
        configuration: [Release]
        targetplatform: [net8.0]
        runtimeidentifier: [win-x64,win-arm64,linux-x64]

    runs-on: ubuntu-latest  # For a list of available runner types, refer to
                             # https://help.github.com/en/actions/reference/workflow-syntax-for-github-actions#jobsjob_idruns-on
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Restore the application
        run: dotnet restore ${{ needs.setup.outputs.desktop_project_path }} --runtime ${{ matrix.runtimeidentifier }} --no-logo
        env:
          Configuration: ${{ matrix.configuration }}
          Targetplatform: ${{ matrix.targetplatform }}
          Runtimeidentifier: ${{ matrix.runtimeidentifier }}

      - name: Create the app package
        run: dotnet publish ${{ needs.setup.outputs.desktop_project_path }} -c ${{ matrix.configuration }} -r ${{ matrix.runtimeidentifier }} --no-restore --no-logo --self-contained true -o ${{ needs.setup.outputs.output_directory }}
        env:
          Configuration: ${{ matrix.configuration }}
          Targetplatform: ${{ matrix.targetplatform }}
          Runtimeidentifier: ${{ matrix.runtimeidentifier }}

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: ${{ needs.setup.outputs.solution_name}}-${{ matrix.runtimeidentifier }}
          path: ${{ needs.setup.outputs.output_directory }}/* # Upload all files in the output directory

  create-release:
    runs-on: ubuntu-latest
    needs: [ setup, build ]
    if: (github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')) || 
       (github.event_name == 'pull_request' && github.event.pull_request.merged == true && github.base_ref == 'main')
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with: 
          fetch-depth: 0
      - name: Read release body from file
        id: read_release_notes
        run: |
          RELEASE_BODY=$(cat release-notes.md)
          echo "content=${RELEASE_BODY}" >> $GITHUB_OUTPUT
      - name: Download win-x64 artifact
        uses: actions/download-artifact@v3
        with:
          name: SaveGameSaver-win-x64 # Match the artifact name from the build job
          path: .
      - name: Download win-arm64 artifact
        uses: actions/download-artifact@v3
        with:
          name: SaveGameSaver-win-arm64 # Match the artifact name from the build job
          path: .
      - name: Print Environment Variables
        run: |
          echo "GITHUB_EVENT_NAME: ${{ github.event_name }}"
          echo "GITHUB_REF: ${{ github.ref }}"
          echo "GITHUB_RUN_NUMBER: ${{ github.run_number }}"
          echo "GITHUB_EVENT_COMMITS: ${{ toJSON(github.event.commits) }}"
          echo "GITHUB_EVENT_PULL_REQUEST: ${{ toJSON(github.event.pull_request) }}"
      - name: Determine Release Name
        id: determine_release_name
        run: |
          releaseName="Release v${{ needs.set_app_version.outputs.appVersion }}.${{ github.run_number }}"
          if [[ "${{ github.event_name }}" == "push" ]]; then
            releaseName="$releaseName - ${{ github.event.commits[0].message }}"
          else
            releaseName="$releaseName - ${{ github.event.pull_request.title }}"
          fi
          echo "release_name=$releaseName" >> $GITHUB_OUTPUT
      - name: Create release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          release_name: ${{ steps.determine_release_name.outputs.release_name }}
          tag_name: ${{ github.ref }}
          body: >-
            ## New Release: v${{ needs.set_app_version.outputs.appVersion }}.${{ github.run_number }}

            **Auto-Update Hint:**
            ```json
            { "version": v"${{ needs.set_app_version.outputs.appVersion }}.${{ github.run_number }}" }
            ```
          draft: false
          prerelease: false
      - name: Upload release assets
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./SaveGameSaver-${{ matrix.runtimeidentifier }}* 
          asset_name: SaveGameSaver-${{ matrix.runtimeidentifier }}.zip 
          asset_content_type: application/zip